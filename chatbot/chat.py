from flask import Flask, request, jsonify
import google.generativeai as genai
from flask_cors import CORS

# Configuration de l'API Gemini
genai.configure(api_key="AIzaSyAthD7hU2TvjupnDLy32yR40hZ9MKF0cuU")

# Liste des m√©decins (exemple)
doctors_list = [
    {"name": "Dr. Sophie Leroy", "specialty": "M√©decine G√©n√©rale", "location": "Centre M√©dical Saint-Martin, 12 Rue de la Paix", "phone": "01 23 45 67 89"},
    {"name": "Dr. Paul Dubois", "specialty": "M√©decine G√©n√©rale", "location": "Clinique du Parc, 5 Avenue des Tilleuls", "phone": "02 34 56 78 90"},
    {"name": "Dr. √âmilie Rousseau", "specialty": "Cardiologie", "location": "Institut Cardiovasculaire, 8 Rue des Roses", "phone": "03 45 67 89 01"},
    {"name": "Dr. Marc Vidal", "specialty": "Cardiologie", "location": "H√¥pital Central, Service Cardiologie", "phone": "04 56 78 90 12"},
    {"name": "Dr. Laura Mercier", "specialty": "Dermatologie", "location": "Clinique Dermatologique Lumi√®re, 22 Boulevard Voltaire", "phone": "05 67 89 01 23"},
    {"name": "Dr. Karim Benali", "specialty": "Dermatologie", "location": "Centre de Sant√© SkinCare, 15 Rue du Commerce", "phone": "06 78 90 12 34"},
    {"name": "Dr. Alice Dupont", "specialty": "Neurologie", "location": "H√¥pital Neurologique, 30 Rue Descartes", "phone": "07 89 01 23 45"},
    {"name": "Dr. Jean-Luc Moreau", "specialty": "Neurologie", "location": "Institut des Neurosciences, 10 Avenue Pasteur", "phone": "08 90 12 34 56"},
    {"name": "Dr. Camille Petit", "specialty": "P√©diatrie", "location": "Maison de l‚ÄôEnfant, 7 Rue des √©coles", "phone": "09 01 23 45 67"},
    {"name": "Dr. Ahmed Ziani", "specialty": "P√©diatrie", "location": "Centre P√©diatrique Sant√©Future, 18 Rue des Oliviers", "phone": "01 12 34 56 78"},
    {"name": "Dr. L√©a Martin", "specialty": "Gyn√©cologie-Obst√©trique", "location": "Clinique Femina, 3 Place de la R√©publique", "phone": "02 23 45 67 89"},
    {"name": "Dr. Nora Ch√©neau", "specialty": "Gyn√©cologie-Obst√©trique", "location": "H√¥pital Maternit√©, Service Gyn√©cologie", "phone": "03 34 56 78 90"},
    {"name": "Dr. Thomas Roux", "specialty": "Orthop√©die/Traumatologie", "location": "Centre Orthop√©dique, 14 Avenue des Champs-√âlys√©es", "phone": "04 45 67 89 01"},
    {"name": "Dr. Fatima El Amrani", "specialty": "Orthop√©die/Traumatologie", "location": "Clinique du Sport, 9 Rue de la Gare", "phone": "05 56 78 90 12"},
    {"name": "Dr. Hugo Bernard", "specialty": "Gastro-ent√©rologie", "location": "Institut Digestif, 25 Rue de la Fontaine", "phone": "06 67 89 01 23"},
    {"name": "Dr. Yasmine Kader", "specialty": "Gastro-ent√©rologie", "location": "H√¥pital Central, Service Gastro", "phone": "07 78 90 12 34"},
    {"name": "Dr. Lucas Perrin", "specialty": "ORL (Oto-Rhino-Laryngologie)", "location": "Clinique ORL AuditionPlus, 6 Rue Mozart", "phone": "08 89 01 23 45"},
    {"name": "Dr. A√Øcha Bensa√Ød", "specialty": "ORL (Oto-Rhino-Laryngologie)", "location": "Centre M√©dical ORL, 17 Rue Victor Hugo", "phone": "09 90 12 34 56"},
    {"name": "Dr. Clara Dupuis", "specialty": "Allergologie", "location": "Centre Allergie & Asthme, 11 Rue des Lilas", "phone": "01 01 23 45 67"},
    {"name": "Dr. Samir Khaled", "specialty": "Allergologie", "location": "H√¥pital Saint-Louis, Service Allergologie", "phone": "02 12 34 56 78"}
]

# Fonction pour g√©n√©rer le prompt
def make_prompt(post_text):
    escaped = post_text.replace("\n", " ").replace("'", "").replace('"', "")
    formatted_doctors = "\n".join([f"{doc['name']} ‚Äì {doc['specialty']}, üìû {doc['phone']}" for doc in doctors_list])
    prompt = (
        "Vous √™tes un assistant m√©dical virtuel. Votre r√¥le est d'analyser les sympt√¥mes d√©crits par l'utilisateur, "
        "de sugg√©rer une hypoth√®se de maladie potentielle (sans poser de diagnostic d√©finitif), puis de guider "
        "l'utilisateur vers le m√©decin sp√©cialiste appropri√© en fonction d'une liste pr√©d√©finie de professionnels "
        "de sant√© et de leurs sp√©cialit√©s.\n\n"
        
        "√âtapes √† Suivre :\n"
        "1. **V√©rification Initiale des Donn√©es :**\n"
        "   - Si l'utilisateur n'a pas d√©crit de sympt√¥mes clairs (ex: 'Je ne sais pas', 'Rien', ou des donn√©es non pertinentes comme 'Bonjour'), "
        "     r√©pondez avec un message empathique et demandez-lui de pr√©ciser ses sympt√¥mes. Exemple :\n"
        "     'Je suis l√† pour vous aider ! Pouvez-vous me d√©crire vos sympt√¥mes (par exemple, douleur, fatigue, fi√®vre) afin que je puisse vous orienter au mieux ?'\n"
        "   - Si des sympt√¥mes sont d√©tect√©s, passez √† l'√©tape suivante.\n\n"
        
        "2. **Collecte des Sympt√¥mes :**\n"
        f"   - L'utilisateur a d√©crit les sympt√¥mes suivants : {escaped}\n"
        "   - Confirmez les sympt√¥mes d√©tect√©s dans la r√©ponse.\n\n"
        
        "3. **Analyse des Sympt√¥mes :**\n"
        "   - Identifiez les mots-cl√©s m√©dicaux pertinents (ex: 'c√©phal√©e' pour maux de t√™te, 'dyspn√©e' pour essoufflement).\n"
        "   - Comparez-les √† une base de connaissances pour g√©n√©rer des hypoth√®ses de maladies plausibles (ex: migraine, infection respiratoire).\n"
        "   - √âvaluez la gravit√© potentielle (ex: sympt√¥mes urgents comme douleur thoracique ou difficult√©s respiratoires ‚Üí orienter vers les urgences).\n\n"
        
        "4. **Pr√©diction de la Maladie :**\n"
        "   - Listez 1 √† 3 maladies possibles par ordre de probabilit√© d√©croissante, avec une explication concise pour chaque hypoth√®se "
        "     (ex: 'Une sinusite est plausible en raison de vos maux de t√™te et congestion nasale').\n"
        "   - Ajoutez syst√©matiquement cet avertissement : 'Ceci est une suggestion bas√©e sur des informations limit√©es. Consultez un m√©decin pour un diagnostic pr√©cis.'\n\n"
        
        "5. **Orientation vers un Sp√©cialiste :**\n"
        "   - En fonction de l'hypoth√®se la plus probable, recommandez un m√©decin sp√©cialiste adapt√© en utilisant cette liste :\n"
        f"     {formatted_doctors}\n"
        "   - Exemple de r√©ponse :\n"
        "     'Pour ces sympt√¥mes, je vous recommande de consulter un dermatologue. Voici des sp√©cialistes disponibles : "
        "[Dr. Laura Mercier ‚Äì Clinique Dermatologique Lumi√®re, üìû 05 67 89 01 23 ; Dr. Karim Benali ‚Äì Centre de Sant√© SkinCare, üìû 06 78 90 12 34].'\n"
        "   - Si les sympt√¥mes sont urgents (ex: douleur thoracique, difficult√©s respiratoires), insistez pour une action imm√©diate :\n"
        "     ' Ascending 'Vos sympt√¥mes n√©cessitent une attention urgente. Appelez le 15 ou rendez-vous aux urgences les plus proches.'\n\n"
        
        "Contraintes :\n"
        "   - Utilisez un langage clair et empathique, √©vitez le jargon m√©dical complexe.\n"
        "   - Ne remplacez pas un m√©decin : rappelez que votre r√¥le est informel et pr√©liminaire.\n"
        "   - Structurez les recommandations de m√©decins sous forme de liste claire (nom, sp√©cialit√©, contact).\n\n"
        
        "Exemple de Dialogue R√©ussi :\n"
        "Utilisateur : 'J'ai des d√©mangeaisons et des plaques rouges sur la peau depuis 2 jours.'\n"
        "Chatbot :\n"
        "1. Sympt√¥mes analys√©s : D√©mangeaisons, plaques rouges, dur√©e de 48h.\n"
        "2. Hypoth√®ses :\n"
        "   - R√©action allergique (probable).\n"
        "   - Dermatite de contact (possible).\n"
        "3. Recommandation : Consultez un dermatologue ou un allergologue. Voici des sp√©cialistes disponibles : "
        "[Dr. Laura Mercier ‚Äì Dermatologie, üìû 05 67 89 01 23 ; Dr. Clara Dupuis ‚Äì Allergologie, üìû 01 01 23 45 67].\n"
        "4. Avertissement : En cas de gonflement du visage ou de difficult√©s respiratoires, appelez le 15 imm√©diatement.\n\n"
        
        "Objectif Final :\n"
        "Guider l'utilisateur de mani√®re rapide, structur√©e et s√©curis√©e vers la prise en charge m√©dicale appropri√©e."
    )
    return prompt

# Fonction pour interagir avec Gemini
def get_theme(post_text):
    prompt = make_prompt(post_text)
    try:
        # Appel de l'API Gemini
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = model.generate_content(prompt)
        return response.text.strip()  # Retourne la r√©ponse g√©n√©r√©e par le mod√®le
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration de la r√©ponse : {e}")
        return "Erreur : Impossible de g√©n√©rer une r√©ponse. Veuillez r√©essayer."

# Initialisation de Flask
app = Flask(__name__)
CORS(app)  

# Route pour l'API
@app.route('/chat', methods=['POST'])
def chat():
    # R√©cup√©rer les donn√©es JSON de la requ√™te
    data = request.json
    user_message = data.get("message", "")

    if not user_message:
        return jsonify({"error": "Aucun message fourni"}), 400

    # G√©n√©rer la r√©ponse du chatbot
    bot_response = get_theme(user_message)

    # Retourner la r√©ponse en JSON
    return jsonify({"response": bot_response})

# D√©marrer l'application Flask
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)
