from flask import Flask, request, jsonify
import google.generativeai as genai
from flask_cors import CORS
import requests  

genai.configure(api_key="AIzaSyAthD7hU2TvjupnDLy32yR40hZ9MKF0cuU")  

def get_doctors_from_api():
    try:
        response = requests.get('http://nodejs:5000/api/doctor/')
        response.raise_for_status()  
        doctors_data = response.json().get('doctors', [])
        
        formatted_doctors = []
        for doctor in doctors_data:
            formatted_doctor = {
                'name': f"Dr. {doctor['User']['prenom']} {doctor['User']['nom']}",
                'specialty': doctor['specialite'],
                'location': doctor['User']['adresse'],
                'phone': doctor['User']['numero_de_telephone']
            }
            formatted_doctors.append(formatted_doctor)
        return formatted_doctors
    except requests.exceptions.RequestException as e:
        print(f"Erreur lors de la r√©cup√©ration des docteurs : {e}")
        return []  

def make_prompt(post_text):
    escaped = post_text.replace("\n", " ").replace("'", "").replace('"', "")
    doctors_list = get_doctors_from_api()  
    formatted_doctors = "\n".join([f"{doc['name']} ‚Äì {doc['specialty']}, üìû {doc['phone']}" for doc in doctors_list])
    prompt = (
        "Vous √™tes un assistant m√©dical virtuel. Votre r√¥le est d'analyser les sympt√¥mes d√©crits par l'utilisateur, "
        "de sugg√©rer une hypoth√®se de maladie potentielle (sans poser de diagnostic d√©finitif), puis de guider "
        "l'utilisateur vers le m√©decin sp√©cialiste appropri√© en fonction d'une liste dynamique de professionnels "
        "de sant√© et de leurs sp√©cialit√©s.\n\n"
        
        "√âtapes √† Suivre :\n"
        "1. **V√©rification Initiale des Donn√©es :**\n"
        "   - Si l'utilisateur n'a pas d√©crit de sympt√¥mes clairs (ex: 'Je ne sais pas', 'Rien', ou des donn√©es non pertinentes comme 'Bonjour'), "
        "     r√©pondez avec un message empathique et demandez-lui de pr√©ciser ses sympt√¥mes. Exemple :\n"
        "     'Je suis l√† pour vous aider ! Pouvez-vous me d√©crire vos sympt√¥mes (par exemple, douleur, fatigue, fi√®vre) afin que je puisse vous orienter au mieux ?'\n"
        "   - Si des sympt√¥mes sont d√©tect√©s, passez √† l'√©tape suivante.\n\n"
        
        "2. **Collecte des Sympt√¥mes :**\n"
        f"   - L'utilisateur a d√©crit les sympt√¥mes suivants : {escaped}\n"
        "   - Confirmez les sympt√¥mes d√©tect√©s dans la r√©ponse.\n\n"
        
        "3. **Analyse des Sympt√¥mes :**\n"
        "   - Identifiez les mots-cl√©s m√©dicaux pertinents (ex: 'c√©phal√©e' pour maux de t√™te, 'dyspn√©e' pour essoufflement).\n"
        "   - Comparez-les √† une base de connaissances pour g√©n√©rer des hypoth√®ses de maladies plausibles (ex: migraine, infection respiratoire).\n"
        "   - √âvaluez la gravit√© potentielle (ex: sympt√¥mes urgents comme douleur thoracique ou difficult√©s respiratoires ‚Üí orienter vers les urgences).\n\n"
        
        "4. **Pr√©diction de la Maladie :**\n"
        "   - Listez 1 √† 3 maladies possibles par ordre de probabilit√© d√©croissante, avec une explication concise pour chaque hypoth√®se "
        "     (ex: 'Une sinusite est plausible en raison de vos maux de t√™te et congestion nasale').\n"
        "   - Ajoutez syst√©matiquement cet avertissement : 'Ceci est une suggestion bas√©e sur des informations limit√©es. Consultez un m√©decin pour un diagnostic pr√©cis.'\n\n"
        
        "5. **Orientation vers un Sp√©cialiste :**\n"
        "   - En fonction de l'hypoth√®se la plus probable, recommandez un m√©decin sp√©cialiste adapt√© en utilisant cette liste :\n"
        f"     {formatted_doctors}\n"
        "   - Exemple de r√©ponse :\n"
        "     'Pour ces sympt√¥mes, je vous recommande de consulter un dermatologue. Voici des sp√©cialistes disponibles : "
        "[Dr. Laura Mercier ‚Äì Clinique Dermatologique Lumi√®re, üìû 05 67 89 01 23 ; Dr. Karim Benali ‚Äì Centre de Sant√© SkinCare, üìû 06 78 90 12 34].'\n"
        "   - Si les sympt√¥mes sont urgents (ex: douleur thoracique, difficult√©s respiratoires), insistez pour une action imm√©diate :\n"
        "     'Vos sympt√¥mes n√©cessitent une attention urgente. Appelez le 15 ou rendez-vous aux urgences les plus proches.'\n\n"
        
        "Contraintes :\n"
        "   - Utilisez un langage clair et empathique, √©vitez le jargon m√©dical complexe.\n"
        "   - Ne remplacez pas un m√©decin : rappelez que votre r√¥le est informel et pr√©liminaire.\n"
        "   - Structurez les recommandations de m√©decins sous forme de liste claire (nom, sp√©cialit√©, contact).\n"
    )
    return prompt

# Fonction pour interagir avec Gemini
def get_theme(post_text):
    prompt = make_prompt(post_text)
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration de la r√©ponse : {e}")
        return "Erreur : Impossible de g√©n√©rer une r√©ponse. Veuillez r√©essayer."

# Initialisation de Flask
app = Flask(__name__)
CORS(app)

# Route pour l'API
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_message = data.get("message", "")

    if not user_message:
        return jsonify({"error": "Aucun message fourni"}), 400

    bot_response = get_theme(user_message)
    return jsonify({"response": bot_response})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)